open Prims
let mem_empty x = ()
let rec mem_existsb f xs = ()
let rec rev_acc_length l acc = ()
let rev_length l = ()
let rec rev_acc_mem l acc x = ()
let rev_mem l x = ()
let append_nil_l l = ()
let rec append_l_nil uu___28_166 = ()
let append_cons_l hd1 tl1 l = ()
let rec append_l_cons hd1 tl1 l = ()
let rec append_assoc l1 l2 l3 = ()
let rec append_length l1 l2 = ()
let rec append_mem l1 l2 a = ()
let rec append_mem_forall l1 l2 = ()
let rec append_count l1 l2 a = ()
let rec append_count_forall l1 l2 = ()
let append_eq_nil l1 l2 = ()
let append_eq_singl l1 l2 x = ()
let rec append_inv_head l l1 l2 = ()
let rec append_inv_tail l l1 l2 = ()
let rec append_length_inv_head left1 right1 left2 right2 = ()
let append_length_inv_tail left1 right1 left2 right2 = ()
let rec rev' uu___29_654 =
  match uu___29_654 with
  | [] -> []
  | hd1::tl1 -> FStar_List_Tot_Base.op_At (rev' tl1) [hd1]
let rev'T uu____668 = rev'
let rec rev_acc_rev' l acc = ()
let rev_rev' l = ()
let rec rev'_append l1 l2 = ()
let rev_append l1 l2 = ()
let rec rev'_involutive uu___30_758 = ()
let rev_involutive l = ()
let rec rev'_list_ind p uu___31_798 = ()
let rev_ind p l = ()
let rec map_lemma f l = ()
let rec partition_mem f l x = ()
let rec partition_mem_forall f l = ()
let rec partition_mem_p_forall p l = ()
let rec partition_count f l x = ()
let rec partition_count_forall f l = ()
let rec sortWith_permutation f l = ()
let rec sorted f uu___32_1141 =
  match uu___32_1141 with
  | [] -> true
  | uu____1147::[] -> true
  | x::y::tl1 -> (f x y) && (sorted f (y :: tl1))
type ('Aa,'Af) total_order = Prims.unit
let rec append_sorted f l1 l2 pivot = ()
let rec sortWith_sorted f l = ()
let rec mem_memP x l = ()
let memP_empty x = ()
let rec memP_existsb f xs = ()
let rec memP_map_intro f x l = ()
let rec memP_map_elim f y l = ()
let noRepeats_nil = ()
let noRepeats_cons h tl1 = ()
let rec noRepeats_append_elim l1 l2 = ()
let rec noRepeats_append_intro l1 l2 = ()
let assoc_nil x = ()
let assoc_cons_eq x y q = ()
let assoc_cons_not_eq x x' y q = ()
let rec assoc_append_elim_r x l1 l2 = ()
let rec assoc_append_elim_l x l1 l2 = ()
let rec assoc_memP_some x y l = ()
let rec assoc_memP_none x l = ()
let assoc_mem x l = ()
let rec fold_left_invar f l p = ()
let rec fold_left_map f_aba f_bc f_aca l = ()
let rec map_append f l1 l2 = ()
let rec fold_left_append f l1 l2 = ()
let rec fold_left_monoid opA zeroA l = ()
let fold_left_append_monoid f z l1 l2 = ()
let rec index_extensionality_aux l1 l2 l_len l_index = ()
let index_extensionality l1 l2 = ()
let rec strict_prefix_of_nil x l = ()
let strict_prefix_of_or_eq_nil l = ()
let strict_prefix_of_cons x l = ()
let rec strict_prefix_of_trans l1 l2 l3 = ()
let rec strict_prefix_of_correct l1 l2 = ()
let rec map_strict_prefix_of f l1 l2 = ()
let rec mem_strict_prefix_of l1 m l2 = ()
let rec strict_prefix_of_exists_append l1 l2 = ()
let strict_prefix_of_or_eq_exists_append l1 l2 = ()
let precedes_tl l = ()
let rec precedes_append_cons_r l1 x l2 = ()
let precedes_append_cons_prod_r l l1 x y l2 = ()
let rec memP_precedes x l = ()
let assoc_precedes x l y = ()